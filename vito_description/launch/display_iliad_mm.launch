<launch>
    <!-- LAUNCH INTERFACE -->
    <arg name="gui" default="false" />
    <arg name="robot_name" default="vito_iliad_mm"/>
    <arg name="use_rviz" default="true"/>
    <arg name="use_joint_state_publisher" default="true"/>
    <arg name="load_moveit" default="false"/>
    <arg name="use_calibration_package" default="true"/>
    <arg name="use_grasp_estimator" default="false"/>

    <!-- configure whether the real hardware is enabled or not -->
    <arg name="head_enabled" default="false"/>
    <arg name="left_arm_enabled" default="false"/>
    <arg name="left_hand_enabled" default="false"/>
    <arg name="right_arm_enabled" default="false"/>
    <arg name="right_hand_enabled" default="false"/>
    <arg name="initial_height" default="0.0"/>

    <!-- choose whether or not to start the full robot simulation -->
    <arg name="use_robot_sim" default="true"/>

    <!-- LAUNCH IMPLEMENTATION -->

    <!-- #### -->

    <!-- load the full robot in robot_description, useful for visualization, collision detection and planning simultaneously -->
    <!-- the selection is only due to the hand visualization which is different in real and simulation -->
    <group if="$(arg use_robot_sim)">
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find vito_description)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=false"/>
    </group>
    <group unless="$(arg use_robot_sim)">
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(find vito_description)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>
    </group>

    <group if="$(arg use_joint_state_publisher)">
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
            <param name="use_gui" value="$(arg gui)"/>
            <!-- listens to each part -->
            <rosparam param="source_list">[/left_arm/joint_states,/left_hand/joint_states,/right_arm/joint_states,/right_hand/joint_states,/head/joint_states]</rosparam>
        </node>
    </group>

    <param name="publish_frequency" value="100"/>
    <group ns="robot1">
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"  />
    </group>
    
    <group if="$(arg use_rviz)">
        <node name="rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find cititruck_description)/launch/cititruck.rviz" output="screen"/>
	<!-- The cititruck rviz config cannot see the tf correctly -->
	<!-- -d $(find cititruck_description)/launch/cititruck.rviz
	-d $(find vito_description)/launch/rviz_config_orunav.rviz
	-->
    </group>

    <!-- load hardware interface and controller configurations -->
    <rosparam command="load" file="$(find vito_description)/config/vito_controllers_iliad.yaml"/>
    <rosparam command="load" file="$(find vito_description)/config/hardware_interfaces.yaml"/>

    <!-- publish the environment in moveit -->
    <!-- (useful for kinematic planning, not fully completed)-->
    <!-- node name="collision_object_publisher" pkg="rostopic" type="rostopic" output="screen" args="pub /collision_object moveit_msgs/CollisionObject -l -f $(find vito_moveit_configuration)/config/environment.yaml">
    </node-->

    <!-- #### simulation and planning -->

    <group if="$(arg use_robot_sim)">
        <!-- Spawn the full robot into Gazebo  -->
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name) -x 5.029 -y 13.538 -z $(arg initial_height) -R 0 -P 0 -Y 0 -ros_namespace /gazebo" respawn="false" output="screen"/>

        <!-- load Gazebo simulation environment -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find gazebo_worlds_oru)/worlds/basement.world"/>
	    <!-- value="$(find vito_description)/worlds/simple_environment.world" -->
            <arg name="paused" value="false"/>
            <!-- when using the real/sim scenario in parallel, set "use_enabled_time" to false -->
            <arg name="use_sim_time" value="true"/>
            <arg name="gui" value="true"/>
            <arg name="headless" value="true"/>
            <arg name="debug" value="false"/>
        </include>

        <!-- calibration transformations -->
        <include file="$(find vito_description)/launch/fake_calibration.launch.xml"/>

    </group>
    <!-- calibration transformations -->
    <group unless="$(arg use_robot_sim)">
        <group if="$(arg use_calibration_package)">
            <!-- it takes the last calibration performed, you can call calibrate and it will overwrite the yaml file -->
            <include file="$(find calibration)/launch/asus_head_vito_broadcaster.launch"/>
            <!-- for the fake eyes, which are not still included here -->
        </group>
    </group>

    <!-- load moveit configuration -->
    <group if="$(arg load_moveit)">
        <include file="$(find vito_moveit_configuration)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="true"/>  
            <arg name="fake_execution" value="false"/>
            <arg name="info" value="true"/>
            <arg name="debug" value="false"/>
        </include>
    </group>

    <!-- #### components -->

    <!-- controllers are launched always, since either real or simulated hardware will be present -->


    <group ns="left_arm">
        <group if="$(arg left_arm_enabled)">
            <!--add a copy of the robot description within the name space -->
            <param name="robot_description" command="$(find xacro)/xacro --inorder $(find vito_description)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>

            <rosparam command="load" file="$(find vito_description)/config/left_arm_names.yaml" />

            <include file="$(find lwr_hw)/launch/lwr_hw.launch">
                <arg name="port" value="49948"/>
                <arg name="ip" value="192.168.0.20"/>
                <arg name="name" value="left_arm"/>
            </include>
            <!-- perhaps it is worth remapping joint states -->
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller stiffness_trajectory_controller damping_trajectory_controller add_torque_trajectory_controller"/>
        <node name="controller_stopper" pkg="controller_manager" type="spawner" args="--stopped joint_impedance_controller teleoperation_controller" />
    </group>
    
    <group ns="right_hand">
        <group if="$(arg right_hand_enabled)">
            <!--add a copy of the robot description within the name space -->
            <param name="robot_description" command="$(find xacro)/xacro --inorder $(find vito_description)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>

            <rosparam command="load" file="$(find vito_description)/config/right_hand_names.yaml" />

            <include file="$(find soft_hand_ros_control)/launch/soft_hand_hw.launch">
                <arg name="use_deafult_joint_names" value="false"/>
                <arg name="hand_id" value="21"/>
            </include>
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller"/>

        <!-- grasp estimator -->
        <group if="$(arg use_grasp_estimator)">
            <rosparam command="load" file="$(find grasp_state_publisher)/config/softgrasp.yaml" />
            <node name="grasp_state_publisher" pkg="grasp_state_publisher" type="grasp_state_publisher" respawn="false" output="screen" />
        </group>
    </group>


    <group ns="right_arm">
        <group if="$(arg right_arm_enabled)">
            <!--add a copy of the robot description within the name space -->
            <param name="robot_description" command="$(find xacro)/xacro --inorder $(find vito_description)/robot/$(arg robot_name).urdf.xacro use_mimic_tag:=true"/>

            <rosparam command="load" file="$(find vito_description)/config/right_arm_names.yaml" />

            <include file="$(find lwr_hw)/launch/lwr_hw.launch">
                <arg name="port" value="49939"/>
                <arg name="ip" value="192.168.0.10"/>
                <arg name="name" value="right_arm"/>
            </include>
            <!-- perhaps it is worth remapping joint states -->
        </group>

        <!-- load the controllers in current namespace -->
        <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_state_controller joint_trajectory_controller stiffness_trajectory_controller damping_trajectory_controller add_torque_trajectory_controller"/>
        <node name="controller_stopper" pkg="controller_manager" type="spawner" args="--stopped joint_impedance_controller teleoperation_controller" />
    </group>


    <!-- LOAD THE NAVIGATION ENVIRONMENT FROM navigation-oru -->
      <rosparam command="load" file="$(find orunav_params)/config/global.cfg"/>
  <rosparam command="load" file="$(find orunav_params)/config/citi1_simulation.cfg" />
  
    <include file="$(find gazebo_worlds_oru)/launch/basement_map_server.launch"/>
    
      <!--<include file="$(find gazebo_worlds_oru)/launch/basement_world_paused.launch"/>-->
      
     <node pkg="orunav_vehicle_execution" type="point_n_click_target_client" name="point_n_click_target_client_citi1" output="screen">
    <param name="load_operation" value="false" />
    <rosparam param="robot_ids">[1]</rosparam>
    <param name="multiple_vehicles" value="true" />
  </node>

  <node pkg="orunav_coordinator_fake" type="coordinator_fake_node" name="coordinator_fake_node" output="screen">
    <param name="multiple_vehicles" value="true" />
    <param name="use_ct" value="false" />  
  </node>
<!-- ALL ROBOT SPECIFIC TASKS -->

  <group ns="robot1">
  <param name="tf_prefix" value="robot1" />

  <node pkg="orunav_mpc" type="controller_node" name="controller" output="screen">
        <param name="robot_id" value="1" />
  </node>
  <include file="$(find orunav_fork_control)/launch/fork_control_sim.launch" />

  <node pkg="orunav_motion_planner" type="get_path_service" name="get_path_service" output="screen">		
    <param name="model" value="CiTiTruck_Expanded10+20_16_1_4.0_0.2.reduced"/>
    <param name="motion_primitives_directory" value="$(find orunav_motion_planner)/Primitives/" />
    <param name="lookup_tables_directory" value="$(find orunav_motion_planner)/LookupTables/" /> 
    <param name="min_incr_path_dist" value="0.2" />
    <param name="visualize" value="true" />
  </node>

  <node pkg="orunav_constraint_extract" type="polygonconstraint_service" name="polygonconstraint_service" output="screen">
    <param name="load_type" value="1" />
    <param name="model_type" value="2" />
    <param name="visualize" value="false" />
    <param name="save_constraints_and_path" value="true" />
    <param name="lookuptables_file" value="$(find orunav_constraint_extract)/tables/service_lookup_model2load1.dat" />
    <param name="visualize_outer_constraints" value="false" />
    <param name="visualize_only_invalid" value="false" />
    <param name="skip_overlap" value="true" />
    <param name="save_lookuptables" value="false" />
  </node>  

  <node pkg="orunav_path_smoother" type="smoothed_path_service" name="smoothed_path_service" output="screen">
    <param name="visualize" value="true" />
    <param name="visualize_deep" value="false" />
    <param name="wheel_base" value="1.190" />
    <param name="minimize_phi_and_dist" value="true" />
    <param name="init_controls" value="true" />
    <param name="use_th_constraints" value="true" />
    <param name="use_xy_constraints" value="true" />
    <param name="phi_min" value="-1.0" /> <!-- -0.9 -->
    <param name="phi_max" value="1.0" />  <!-- 0.9 -->
    <param name="reassign_constraints" value="true" />
    <param name="reassign_iters" value="1" />
    <param name="reassign_min_distance" value="0.1" />
  </node>  

  <node pkg="orunav_vehicle_execution" type="orunav_vehicle_execution_node" name="orunav_vehicle_execution_node_citi1" output="screen">
    <param name="visualize" value="true" />
    <param name="max_tracking_error" value="-1." />
    <param name="use_forks" value="true" />

    <param name="max_vel" value="0.3" />
    <param name="max_rotational_vel" value="0.3" />
    <param name="max_acc" value="0.1" />
  </node>

  </group>
</launch>
